@Configuration
@EnableKafka
public class KafkaIntegrationConfig {

    @Value("${spring.kafka.bootstrap-servers}")
    private String bootstrapServers;

    @Bean
    public ConsumerFactory<String, String> consumerFactory() {
        Map<String, Object> props = new HashMap<>();
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        props.put(ConsumerConfig.GROUP_ID_CONFIG, "my-group-id");
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        return new DefaultKafkaConsumerFactory<>(props);
    }

    @Bean
    public ConcurrentKafkaListenerContainerFactory<String, String> kafkaListenerContainerFactory() {
        ConcurrentKafkaListenerContainerFactory<String, String> factory =
                new ConcurrentKafkaListenerContainerFactory<>();
        factory.setConsumerFactory(consumerFactory());
        return factory;
    }

    @Bean
    public KafkaTemplate<String, String> kafkaTemplate() {
        Map<String, Object> props = new HashMap<>();
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        return new KafkaTemplate<>(new DefaultKafkaProducerFactory<>(props));
    }

    @Bean
    public IntegrationFlow kafkaIntegrationFlow() {
        return IntegrationFlows.from(
                Kafka.inboundChannelAdapter(
                        new ConcurrentMessageListenerContainer<>(
                                consumerFactory(),
                                new ContainerProperties("topic1")
                        )
                    )
                    .consumerProperties(props -> props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest"))
            )
            .routeToRecipients(route -> route
                .recipient("topic2")
                .recipient("topic3"))
            .handle("myService", "process")
            .get();
    }

}

//===================improvised same above code=============================================

@Configuration
@EnableIntegration
public class KafkaIntegrationConfig {

    private final KafkaProperties kafkaProperties;

    private final MyService myService;

    private final MyService2 myService2;

    public KafkaIntegrationConfig(KafkaProperties kafkaProperties, MyService myService, MyService2 myService2) {
        this.kafkaProperties = kafkaProperties;
        this.myService = myService;
        this.myService2 = myService2;
    }

    // Kafka Consumer 1

    @Bean
    public KafkaMessageDrivenChannelAdapter<String, String> kafkaMessageDrivenChannelAdapter() {
        ContainerProperties containerProperties = new ContainerProperties("topic1");
        ConsumerFactory<String, String> consumerFactory = new DefaultKafkaConsumerFactory<>(kafkaProperties.buildConsumerProperties());
        KafkaMessageListenerContainer<String, String> messageListenerContainer = new KafkaMessageListenerContainer<>(consumerFactory, containerProperties);
        messageListenerContainer.setAutoStartup(false);
        KafkaMessageDrivenChannelAdapter<String, String> kafkaMessageDrivenChannelAdapter = new KafkaMessageDrivenChannelAdapter<>(messageListenerContainer);
        kafkaMessageDrivenChannelAdapter.setOutputChannelName("myServiceInputChannel");
        return kafkaMessageDrivenChannelAdapter;
    }

    // Kafka Consumer 1 -> MyService -> Kafka Producer 1

    @Bean
    public IntegrationFlow myServiceIntegrationFlow() {
        return IntegrationFlows.from("myServiceInputChannel")
                .handle(myService::process)
                .log()
                .channel("topic2Channel")
                .get();
    }

    // Kafka Consumer 2

    @Bean
    public KafkaMessageDrivenChannelAdapter<String, String> kafkaMessageDrivenChannelAdapter2() {
        ContainerProperties containerProperties = new ContainerProperties("topic2");
        ConsumerFactory<String, String> consumerFactory = new DefaultKafkaConsumerFactory<>(kafkaProperties.buildConsumerProperties());
        KafkaMessageListenerContainer<String, String> messageListenerContainer = new KafkaMessageListenerContainer<>(consumerFactory, containerProperties);
        messageListenerContainer.setAutoStartup(false);
        KafkaMessageDrivenChannelAdapter<String, String> kafkaMessageDrivenChannelAdapter = new KafkaMessageDrivenChannelAdapter<>(messageListenerContainer);
        kafkaMessageDrivenChannelAdapter.setOutputChannelName("myService2InputChannel");
        return kafkaMessageDrivenChannelAdapter;
    }

    // Kafka Consumer 2 -> MyService2 -> Kafka Producer 2

    @Bean
    public IntegrationFlow myService2IntegrationFlow() {
        return IntegrationFlows.from("myService2InputChannel")
                .handle(myService2::process)
                .log()
                .channel("topic3Channel")
                .get();
    }

    // Kafka Producer 1

    @Bean
    public MessageChannel topic2Channel() {
        return new DirectChannel();
    }

    @Bean
    public KafkaMessageHandler<String, String> kafkaMessageHandler() {
        ProducerFactory<String, String> producerFactory = new DefaultKafkaProducerFactory<>(kafkaProperties.buildProducerProperties());
        KafkaMessageHandler<String, String> kafkaMessageHandler = new KafkaMessageHandler<>(producerFactory);
        kafkaMessageHandler.setTopicExpression(new LiteralExpression("topic2"));
        return kafkaMessageHandler;
    }

    // Kafka Producer 2

    @Bean
    public MessageChannel topic3Channel() {
        return new DirectChannel();
    }

    @Bean
    public KafkaMessageHandler<String, String> kafkaMessageHandler2() {
        ProducerFactory<String, String> producerFactory = new DefaultKafkaProducerFactory<>(kafkaProperties.buildProducerProperties());
        KafkaMessageHandler<String, String> kafkaMessageHandler = new KafkaMessageHandler<>(producerFactory);
        kafkaMessageHandler.setTopicExpression(new LiteralExpression("topic3"));

